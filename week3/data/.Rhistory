data_cor <- cor(ats$Year,ats$Temp)
return(data_cor)
}
myData(ats)
data_cor <- cor(ats$Year,ats$Temp)
data_cor
nrow(ats)
shufdata <- ats[sample(,nrow(ats))]
shufdata <- ats[sample(nrow(ats))]
shufdata <- ats[sample(nrow(ats)),]
View(shufdata)
return(pvalue)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
dataCor <- cor(ats$Year,ats$Temp)
n<-200
shuffleC <- c()
for (i in 1:n){
shufdata <- ats[sample(nrow(ats)),]
shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}
p_value_Cor <- function(shuffleC){
pvalue <- (sum(dataCor>=shuffleC)+1)/length(shuffleC)
return(pvalue)
}
p_value_Cor(ats)
pvalue <- (sum(dataCor>=shuffleC)+1)/length(shuffleC)
p_value_Cor <- function(){
pvalue <- (sum(dataCor>=shuffleC)+1)/length(shuffleC)
return(pvalue)
}
p_value_Cor(ats)
pvalue <- (sum(dataCor>=shuffleC)+1)/length(shuffleC)
pvalue
pvalue <- (sum(dataCor<=shuffleC)+1)/length(shuffleC)
pvalue
sum(dataCor<=shuffleC)
shuffleC <- numeric(length = n)
for (i in 1:n){
shufdata <- ats[sample(nrow(ats)),]
shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}
pvalue <- (sum(dataCor<=shuffleC)+1)/length(shuffleC)
pvalue
n<-200
shuffleC <- numeric(length = n)
for (i in 1:n){
shufdata <- ats[sample(nrow(ats)),]
shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}
dataCor <- cor(ats$Year,ats$Temp)
k <- 1
for (i in shuffleC){
if (dataCor<= i){
k + 1
}
return(k)
}
pvalue<- k/length(shuffleC)
pvalue
pvalue<-
/length(shuffleC)
k
for (i in shuffleC){
if (dataCor<= i){
k + 1
}
}
pvalue<- k/length(shuffleC)
pvalue
k
dataCor <- cor(ats$Year,ats$Temp)
shuffleC
hist(dataCor,xlim=range(c(-0.6,0.6)))
hist(shuffleC,xlim=range(c(-0.6,0.6)))
hist(shuffleC)
n<-20000
shuffleC <- numeric(length = n)
for (i in 1:n){
shufdata <- ats[sample(nrow(ats)),]
shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}
k <- 1
for (i in shuffleC){
if (dataCor<= i){
k + 1
}
}
hist(shuffleC)
pvalue<- k/length(shuffleC)
pvalue
n<-2000000
shuffleC <- numeric(length = n)
for (i in 1:n){
shufdata <- ats[sample(nrow(ats)),]
shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}
n<-20000
shuffleC <- numeric(length = n)
for (i in 1:n){
shufdata <- ats[sample(nrow(ats)),]
shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}
k <- 1
for (i in shuffleC){
if (dataCor<= i){
k + 1
}
}
hist(shuffleC)
pvalue<- k/length(shuffleC)
pvalue
n<-200000
shuffleC <- numeric(length = n)
for (i in 1:n){
shufdata <- ats[sample(nrow(ats)),]
shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}
k <- 1
for (i in shuffleC){
if (dataCor<= i){
k + 1
}
}
hist(shuffleC)
pvalue<- k/length(shuffleC)
pvalue
k
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
MyData[MyData == ""] = 0
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
install.packages("reshape2")
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
View(MyMetaData)
MyData[MyData == ""] = 0
MyData <- t(MyData)
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
reshape2?melt
?melt
require(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
require(tidyverse)
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well
MyWrangledData <- dplyr::as_tibble(MyWrangledData)
MyWrangledData
MyWrangledData <- as_tibble(MyWrangledData)
class(MyWrangledData)
glimpse(MyWrangledData) #like str(), but nicer!
filter(MyWrangledData, Count>100) #like subset(), but nicer!
slice(MyWrangledData, 10:15) # Look at a particular range of data rows
MyWrangledData %>%
group_by(Species) %>%
summarise(avg = mean(Count))
aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean)
fix(MyData)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
head(MyData)
MyMetaData
head(MyData)
dim(MyData)
str(MyData)
fix(MyData)
fix(MyMetaData)
MyWrangledData <- as_tibble(MyWrangledData)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
head(MyData)
dim(MyData)
str(MyData)
MyData[MyData == ""] = 0
MyData <- t(MyData)
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
require(tidyverse)
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well
MyWrangledData <- dplyr::as_tibble(MyWrangledData)
MyWrangledData
MyWrangledData <- as_tibble(MyWrangledData)
class(MyWrangledData)
glimpse(MyWrangledData) #like str(), but nicer!
filter(MyWrangledData, Count>100) #like subset(), but nicer!
slice(MyWrangledData, 10:15) # Look at a particular range of data rows
MyWrangledData %>%
group_by(Species) %>%
summarise(avg = mean(Count))
aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
head(MyData)
dim(MyData)
str(MyData)
MyData[MyData == ""] = 0
MyData <- t(MyData)
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData[MyData == ""] = 0
MyData <- t(MyData)
head(MyData)
MyData <- t(MyData)
MyData <- t(MyData)
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
require(tidyverse)
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well
MyWrangledData <- dplyr::as_tibble(MyWrangledData)
MyWrangledData
MyWrangledData <- as_tibble(MyWrangledData)
class(MyWrangledData)
MyWrangledData
class(MyWrangledData)
glimpse(MyWrangledData) #like str(), but nicer!
filter(MyWrangledData, Count>100) #like subset(), but nicer!
slice(MyWrangledData, 10:15) # Look at a particular range of data rows
MyWrangledData %>%
group_by(Species) %>%
summarise(avg = mean(Count))
aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData <- dplyr::as_tibble(t(as.data.frame(MyData)))
MyData <- dplyr::as_tibble(t(MyData))
MyData[is.na(MyData)] = 0
#MyData <- t(MyData)
head(MyData)
MyData <- dplyr::as_tibble(t(MyData))
MyData[is.na(MyData)] = 0
#MyData <- t(MyData)
head(MyData)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData <- dplyr::as_tibble(t(MyData))
MyData[is.na(MyData)] = 0
#MyData <- t(MyData)
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
MyData[is.na(MyData)] = 0
#MyData <- t(MyData)
head(MyData)
#MyData <- t(MyData)
head(MyData)
MyData[is.na(MyData)] == 0
#MyData <- t(MyData)
head(MyData)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData <- dplyr::as_tibble(t(MyData))
MyData[is.na(MyData)] == 0
MyData[MyData == ""] = 0
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData <- dplyr::as_tibble(t(MyData))
MyData[MyData == ""] = 0
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData[MyData == ""] = 0
MyData <- dplyr::as_tibble(t(MyData))
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData <- gather(TempData, key="Species",value = "Count", "Cultivation", "Block", "Plot", "Quadrat")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData <- gather(TempData, key="Species",value = "Count", -"Cultivation", -"Block", -"Plot", -"Quadrat")
head(MyWrangledData); tail(MyWrangledData)
glimpse(MyWrangledData) #like str(), but nicer!
MyWrangledData %>%
mutate(Cultivation = as.factor(Cultivation))
str(MyWrangledData)
MyWrangledData %>%
mutate(Cultivation, as.factor(Cultivation))
str(MyWrangledData)
MyWrangledData %>%
mutate("Cultivation", as.factor("Cultivation"))
str(MyWrangledData)
MyWrangledData %>%
mutate(Cultivation, as.factor(Cultivation))
MyWrangledData <- MyWrangledData %>%
mutate(Cultivation, as.factor(Cultivation))
str(MyWrangledData)
MyWrangledData <- gather(TempData, key="Species",value = "Count", -"Cultivation", -"Block", -"Plot", -"Quadrat")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData <- TempData %>%
mutate(Cultivation, as.factor(Cultivation))
str(MyWrangledData)
MyWrangledData <- TempData %>%
mutate(Cultivation = as.factor(Cultivation))
MyWrangledData <- MyWrangledData %>%
mutate(Cultivation = as.factor(Cultivation))
str(MyWrangledData)
require(reshape2)# load the reshape2 package
MyWrangledData <- gather(TempData, key="Species",value = "Count", -"Cultivation", -"Block", -"Plot", -"Quadrat")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData <- MyWrangledData %>%
mutate(Cultivation = as.factor(Cultivation))
str(MyWrangledData)
MyWrangledData <- MyWrangledData %>%
mutate(Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Quadrat = as.factor(Quadrat),
Count = as. interger(Count))
MyWrangledData <- MyWrangledData %>%
mutate(Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Quadrat = as.factor(Quadrat),
Count = as.integer(Count))
str(MyWrangledData)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData[MyData == ""] = 0
MyData <- dplyr::as_tibble(t(MyData))
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- gather(TempData, key="Species",value = "Count", -"Cultivation", -"Block", -"Plot", -"Quadrat")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData <- MyWrangledData %>%
mutate(Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot =as.factor(Plot),
Quadrat = as.factor(Quadrat),
Count = as.integer(Count))
glimpse(MyWrangledData) #like str(), but nicer!
filter(MyWrangledData, Count>100) #like subset(), but nicer!
slice(MyWrangledData, 10:15) # Look at a particular range of data rows
MyWrangledData %>%
group_by(Species) %>%
summarise(avg = mean(Count))
aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean)
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData[MyData == ""] = 0
MyData <- t(MyData)
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
