Starting code feedback for Zitong, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 4.93 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week7, week3, week2, Feedback, miniproject, week1

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp 
.DS_Store
.Rhistory

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository

## Descrption

This repository contains **codes**, **data**, **results** and **sandbox** folders of CMEE Coursework.

## Main content
- [x] **Week1**

Shell scripts for courseworks in **shell scripting** and scientific documents with **LaTex**.
<br>

- [x] **Week2**

Biological computing in **Python**.
<br>

- [x] **Week3**

Biological Computing in **R**.
<br>

- [x] **Week7**

Biological computing in **Python**.
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: week1, week2, week3, week7

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: code, sandbox, results, data

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Coursework for CMEE: Week 3

- **basic_io.R:** A simple script to illustrate R input-output.

- **boilerplate.R:** A boilerplate R script for demonstrating R functions.

- **break.R:** R loop demonstration.

- **TAutoCorr.R:** Calculation and plot for Practical: Autocorrelation in weather. 

- **Autocorrelation.tex:** Source code for results and interpretation for Practical: Autocorrelation in weather.

- **Autocorrelation.pdf:** Results and interpretation for Practical: Autocorrelation in weather.

- **control_flow.R:** Demonstrating control flow tools.

- **Ricker.R:** Runs a simulation of the Ricker model

- **sample.R:** An example of vectorization involving lapply and sapply

- **TreeHeight.R:** Calculating heights of trees given distance of each tree from its base and angle to its top, using  the trigonometric formula.

- **Vectorize2.R:** Runs the stochastic Ricker equation with Gaussian fluctuations. 
**********************************************************************

Results directory is empty - good! 

Found 33 code files: Florida.sh, apply2.R, apply1.R, Girko.R, whilefornext.R, plotLin.R, Florida.R, sample.R, PP_Dists.R, get_TreeHeight.py, TAutoCorr.tex, MyBars.R, PP_Regress_loc.R, control_flow.R, TAutoCorr.bib, TAutoCorr.R, Ricker.R, boilerplate.R, R_conditionals.R, browse.R, GPDD_Data.R, PP_Regress.R, Vectorize2.R, DataWrangTidy.R, preallocate.R, break.R, run_get_TreeHeight.sh, get_Treeheight.R, DataWrang.R, Florida.tex, TreeHeight.R, basic_io.R, Vectorize1.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file Florida.sh...

File contents are:

**********************************************************************
#!/bin/bash

x=$(rev <<< $1 | cut -d . -f2- | rev)
pdflatex $x.tex
pdflatex $x.tex
pdflatex $x.tex
evince $x.pdf &

## Cleanup
rm *.aux
rm *.log
rm *.bbl
rm *.blg
**********************************************************************

Testing Florida.sh...

Output (only first 500 characters): 


**********************************************************************
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(/usr/share/texlive/texmf-dist/tex/latex/tools/.tex
LaTeX2e <2021-11-15> patch level 1
L3 programming layer <2022-01-21> File ignored)
*
! Emergency stop.
<*> .tex
        
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on .log.
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded 
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.bbl': No such file or directory
rm: cannot remove '*.blg': No such file or directory

(evince:249948): Handy-WARNING **: 15:42:11.981: Using GtkSettings:gtk-application-prefer-dark-theme together with HdyStyleManager is unsupported. Please use HdyStyleManager:color-scheme instead.

** (evince:249948): WARNING **: 15:42:12.209: Error when getting information for file “/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ZitongZhao_/week3/code/.pdf”: No such file or directory

** (evince:249948): WARNING **: 15:42:12.210: set_filenames: Error when getting information for file “/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ZitongZhao_/week3/code/.pdf”: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.235: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.243: Error setting file metadata: No such file or directory

** (evince:249948): WARNING **: 15:42:12.243: Error setting file metadata: No such file or directory

======================================================================
Inspecting script file apply2.R...

File contents are:

**********************************************************************
SomeOperation <- function(v) { # (What does this function do?)
  if (sum(v) > 0) { #note that sum(v) is a single (scalar) value
    return (v * 100)
  } else { 
  return (v)
    }
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))
**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 


**********************************************************************
             [,1]        [,2]        [,3]         [,4]       [,5]      [,6]
 [1,] -1.73220542  0.12421805  50.9169861 -2.024874310 -116.01521 -96.09400
 [2,] -0.84619282  0.20582763  71.8276415  0.109209054   38.48549 154.57262
 [3,] -0.04372444 -1.78574421 -67.0687121 -0.068383258   30.42569 -75.70706
 [4,]  0.23986704  0.28173996  -0.4544198 -0.081792887  -71.13413  16.42104
 [5,]  0.47981050 -1.62413540 105.0215163 -0.005821324   55.69254 159.54554
 [6,] -0.39312798  1.15796865   2.7145199 -1.
**********************************************************************

Code ran without errors

Time consumed = 0.25017s

======================================================================
Inspecting script file apply1.R...

File contents are:

**********************************************************************
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)

**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 


**********************************************************************
 [1]  0.42829444 -0.28999656 -0.43348372  0.21858352 -0.35739181 -0.58796288
 [7] -0.07562355 -0.05717518  0.04924731 -0.07774867
 [1] 0.9200673 1.9961999 0.6529138 0.6742021 0.7499810 0.2650718 0.4776923
 [8] 0.8347701 0.4872869 0.8131839
 [1] -0.15443561  0.23256214 -0.02592545 -0.02179790 -0.06661034 -0.20078389
 [7] -0.09906898 -0.02297127 -0.49865216 -0.32557365

**********************************************************************

Code ran without errors

Time consumed = 0.19954s

======================================================================
Inspecting script file Girko.R...

File contents are:

**********************************************************************
require(ggplot2)
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix

M <- matrix(rnorm(N * N), N, N) # Build the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # rename the columns



# plot the eigenvalues
pdf("../Results/Girko.pdf")
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
graphics.off()

**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: ggplot2
Error in pdf("../Results/Girko.pdf") : 
  cannot open file '../Results/Girko.pdf'
Execution halted

======================================================================
Inspecting script file whilefornext.R...

File contents are:

**********************************************************************
for (i in 1:10) {
  if ((i %% 2) == 0) # check if the number is odd
    next # pass to next iteration of loop 
  print(i)
}
**********************************************************************

Testing whilefornext.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.20175s

======================================================================
Inspecting script file plotLin.R...

File contents are:

**********************************************************************
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

pdf("../results/MyLinReg.pdf")
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")

p
graphics.off()

**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(my_data, aes(x = x, y = y, colour = abs(my_lm$residual))) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file Florida.R...

File contents are:

**********************************************************************
rm(list=ls())

load("../data/KeyWestAnnualMeanTemperature.RData")


dataCor <- cor(ats$Year,ats$Temp)

n<-200000
shuffleC <- numeric(length = n)
for (i in 1:n){
  shufdata <- ats[sample(nrow(ats)),]
  shuffleC[i] <-cor(ats$Year,shufdata$Temp)
}

k <- 1
for (i in shuffleC){
  if (dataCor<= i){
    k + 1
  }
}
hist(shuffleC)
pdf(file="../results/CorTemp.pdf")
CorTemp <- hist(shuffleC)
dev.off()

pvalue<- k/length(shuffleC)

pvalue


**********************************************************************

Testing Florida.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00582s

======================================================================
Inspecting script file sample.R...

File contents are:

**********************************************************************
######### Functions ##########

## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n) {
    pop_sample <- sample(popn, n, replace = FALSE)
    return(mean(pop_sample))
}

## Calculate means using a FOR loop on a vector without preallocation:
loopy_sample1 <- function(popn, n, num) {
    result1 <- vector() #Initialize empty vector of size 1 
    for(i in 1:num) {
        result1 <- c(result1, myexperiment(popn, n))
    }
    return(result1)
}

## To run "num" iterations of the experiment using a FOR loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num) {
    result2 <- vector(,num) #Preallocate expected size
    for(i in 1:num) {
        result2[i] <- myexperiment(popn, n)
    }
    return(result2)
}

## To run "num" iterations of the experiment using a FOR loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num) {
    result3 <- vector("list", num) #Preallocate expected size
    for(i in 1:num) {
        result3[[i]] <- myexperiment(popn, n)
    }
    return(result3)
}


## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num) {
    result4 <- lapply(1:num, function(i) myexperiment(popn, n))
    return(result4)
}

## To run "num" iterations of the experiment using vectorization with sapply:
sapply_sample <- function(popn, n, num) {
    result5 <- sapply(1:num, function(i) myexperiment(popn, n))
    return(result5)
}

set.seed(12345)
popn <- rnorm(10000) # Generate the population
hist(popn)

n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment

print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))

print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))

print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))

print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))

print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))
**********************************************************************

Testing sample.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops without preallocation on a vector took:"
   user  system elapsed 
  0.345   0.016   0.362 
[1] "Using loops with preallocation on a vector took:"
   user  system elapsed 
  0.224   0.000   0.224 
[1] "Using loops with preallocation on a list took:"
   user  system elapsed 
  0.226   0.000   0.226 
[1] "Using the vectorized sapply function (on a list) took:"
   user  system elapsed 
  0.228   0.000   0.229 
[1] "Using the vectorized lapply function (on a list) took:"
   user  syst
**********************************************************************

Code ran without errors

Time consumed = 1.59272s

======================================================================
Inspecting script file PP_Dists.R...

File contents are:

**********************************************************************
rm(list = ls())
MyData <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
str(MyData)
require(ggplot2)

logPred <- log(MyData$Predator.mass)
logPrey <- log(MyData$Prey.mass)
Ratio <- MyData$Prey.mass/MyData$Predator.mass
logRatio <- log(Ratio)
feeding <- MyData$Type.of.feeding.interaction
TempData = data.frame(feeding, logPred, logPrey, logRatio)
UniqFeeding <- unique(feeding)
par(mfrow=c(2,3))
MeanPred<-c()
MeanPrey<-c()
MeanRatio<-c()
MedPred<-c()
MedPrey<-c()
MedRatio<-c()


pdf("../Results/Pred_Subplots.pdf")
ggplot(TempData,aes(x=logPred))+ 
     labs(x="Body Mass", y="", 
     title  = "Predator mass") +
  geom_histogram(aes(x=logPred, color = feeding, fill = feeding),
                 alpha = 0.4,
                bins =30)+
  scale_fill_manual(values = c(2,3,4,5,6))+
  scale_color_manual(values = c(2,3,4,5,6))+
  facet_wrap( .~ feeding, scales = "free")
k <- 0
for (i in UniqFeeding){
  hist(TempData$logPred[TempData$feeding==i],xlab = i)
  k <- k+ 1
  MeanPred[k] <-(mean(TempData$logPred[TempData$feeding==i]))
  MedPred[k] <-(median(TempData$logPred[TempData$feeding==i]))
}
graphics.off();


pdf("../Results/Prey_Subplots.pdf")
ggplot(TempData,aes(x=logPrey))+ 
       labs(x="Body Mass", y="", 
       title = "Prey mass") +
  geom_histogram(aes(x=logPrey, color = feeding, fill = feeding),
                 alpha = 0.4,
                 bins =30)+
  scale_fill_manual(values = c(2,3,4,5,6))+
  scale_color_manual(values = c(2,3,4,5,6))+
  facet_wrap( .~ feeding, scales = "free")
k <- 0
for (i in UniqFeeding){
  hist(TempData$logPrey[TempData$feeding==i],xlab = i)
  k <- k+ 1
  MeanPrey[k] <-(mean(TempData$logPrey[TempData$feeding==i]))
  MedPrey[k] <-(median(TempData$logPrey[TempData$feeding==i]))
}
graphics.off()

pdf("../Results/SizeRatio_Subplots.pdf")
ggplot(TempData,aes(x=logratio)) + 
       labs(x= "Body Mass (g)", y="", 
       title  = "Size Ratio of prey mass and predator mass") +
  geom_histogram(aes(x=logRatio, color = feeding, fill = feeding),
                 alpha = 0.4,
                 bins =30)+
  scale_fill_manual(values = c(2,3,4,5,6))+
  scale_color_manual(values = c(2,3,4,5,6))+
  facet_wrap( .~ feeding, scales = "free")
k <- 0
for (i in UniqFeeding){
  hist(TempData$logRatio[TempData$feeding==i],xlab = i)
  k <- k + 1
  MeanRatio[k] <-(mean(TempData$logRatio[TempData$feeding==i]))
  MedRatio[k] <-(median(TempData$logRatio[TempData$feeding==i]))
}
graphics.off()

Data <- data.frame(MeanPred,MedPred,MeanPrey,MedPrey,MeanRatio,MedRatio)
rownames(Data) <- UniqFeeding
write.csv(Data, file = "../Results/PP_Results.csv")

**********************************************************************

Testing PP_Dists.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../Data/EcolArchives-E089-51-D1.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file get_TreeHeight.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
    This function calculates heights of trees given distance of each tree 
    from its base and angle to its top, using  the trigonometric formula
"""

__appname__ = 'get_TreeHeight.py'
__author__ = 'Electric Emus (amy.feakes22@imperial.ac.uk, f.ferreira22@imperial.ac.uk,\
                             zitong.zhao22@imperial.ac.uk, xuanyin.zheng22@imperial.ac.uk,\
                             dongxuan.zhu22@imperial.ac.uk)'
__version__ = '0.0.1'

#Imports
import sys
import pandas as pd
import numpy as np


# Functions
def treeheight(degrees, distance):
    """ Calculates the height of the trees"""
    radians = np.radians(degrees)
    height = distance * np.tan(radians)
    return height

def main(argv):
    """Main function to call the script"""
    file=sys.argv[1]
    filename=file.split(".")[0]
    df=pd.read_csv(file)
    df["Tree.Height.m"]=treeheight(df["Angle.degrees"],df["Distance.m"])
    filename=file.split("/")[-1]
    filename=filename.split(".")[0]
    outpath=(f"../results/{filename}_TreeHeights_py.csv")
    df.to_csv(outpath,index=False)
    
print(f"\nCompleted Tree Height Calculation.\nData Files found in Results folder!!!")

    
if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing get_TreeHeight.py...

get_TreeHeight.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

Completed Tree Height Calculation.
Data Files found in Results folder!!!

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ZitongZhao_/week3/code/get_TreeHeight.py", line 42, in <module>
    status = main(sys.argv)
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ZitongZhao_/week3/code/get_TreeHeight.py", line 29, in main
    file=sys.argv[1]
IndexError: list index out of range

======================================================================
Inspecting script file TAutoCorr.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}
\usepackage{url}
\usepackage{hyperref}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{float}
\usepackage[left=15mm, right=15mm, top=5mm, bottom=5mm]{geometry}
\usepackage{subcaption}

\title{Are temperatures of one year significantly correlated with next year (sucessive years), in a given location?}

\author{Electric Emus \\ CMEE }

\date{\today}

\begin{document}
  \maketitle
  
    \section{Rationale}

    Serial autocorrelation is when there is significant correlation between successive datapoints in a data set. This means that there is some degree of similarity between the data points where, possibly, exists an unnacounted relationship in one or more of the variables.
    In this report we evaluate the annual mean temperatures from Key West, Florida, USA, between 1901 and 2000. Our aim is to examine this region temperatures fluctuations and analyse if we can detect significant correlation between pair of years.
    
  \section{Methods}

    Data from Key West, Florida climatic region was gathered from the TheMulQuaBio \cite{themulquabio_git} repository. 
    To test for autocorrelation between the data points we have removed one observation from the annual temperature values (n-1) and pair this with its sucessive year.
    We have then calculated the correlation between initial time-points and its sucessive years using Pearsons Correlation (Eq. 1):
    
    \begin{equation}
      \rho = \frac{{}\sum_{i=1}^{n} (x_i - \overline{x})(y_1 - \overline{y})}
      {\sqrt{\sum_{i=1}^{n} (x_i - \overline{x})^2(y_1 - \overline{y})^2}}
    \end{equation}
    
    Following the same process, we have generated random samples of temperatures and iterate this 10,000 times. 
    For each permutation the respective correlation coefficient was calculated.
    To understand the significance of our results we calculate what fraction of our randomized results are greater than the observed initial correlation.

  \section{Results}

  A moderate positive correlation in annual temperatures was found for the initial values $t_0$ and $t_1$  (Figure 1.a). 
  This same autocorrelation was not seen in the permutated simulations that we ran. 
  Figure 2.b represents the frequency of this correlations generated, with most of coefficients falling between negative (-0.2) and positive (0.2) weak correlations.
  The fraction of randomized permutations that have the same correlation of initial values was very low, being significantly different ($ P\textsubscript{value} < 0.001 $).



    \begin{figure}[H]
      \centering
      \begin{subfigure}{.45\textwidth}
        \captionsetup{singlelinecheck = false, format = hang, justification = raggedright, font = footnotesize, labelsep = space}
        \centering
        \includegraphics[width=1\linewidth]{../results/Florida_Temperatures_relationship.png}
        \caption{Relationship between observed $t_0$ and $t_1$ Temperatures for Key West Florida}
        \label{fig:sub1}
      \end{subfigure}
      \begin{subfigure}{.45\textwidth}
        \captionsetup{singlelinecheck = false, format = hang, justification = raggedright, font = footnotesize, labelsep = space}
        \centering
        \includegraphics[width=1\linewidth]{../results/Florida_Temperatures_cor_density.png}
        \caption{Frequency of correlation coefficients for the 10,000 permutations}
        \label{fig:sub2}
      \end{subfigure}
      \caption{Scatterplot and density plot of Key West}
      \label{fig:test}
    \end{figure}


  \section{Discussion}

  The goal of our mini report was to identify any potential serial autocorrelation between observed data points.
  Despite the evidence mounting for an increase in temperatures across the globe, our randomized sampling does not follow this pattern, resulting in a significant correlation different from the initial observations.
  Nevertheless, being Florida located in a region that it is potentially threathened by climate change adverse events, our exhaustive randomized simulations did not detect any inflated behaviour in the data points that might suggests an increase in temperarures over diferent time-series.


  \bibliographystyle{apalike}
  \bibliography{TAutoCorr}
   
\end{document}
**********************************************************************

Testing TAutoCorr.tex...

======================================================================
Inspecting script file MyBars.R...

File contents are:

**********************************************************************
a <- read.table("../data/Results.txt", header = TRUE)
head(a)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros


pdf("../Results/MyBars.pdf")
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y1,
  size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)

# Print the second linerange
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y2,
  size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)

# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y3,
  size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)

# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
  scale_y_continuous("My y axis") + 
  theme_bw() + 
  theme(legend.position = "none") 
p
graphics.off()

**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 


**********************************************************************
         x   y1   y2 y3 Label
1 3.515424 4320 4320  0  <NA>
2 3.533984 2160 2160  0  <NA>
3 3.557647 4320 4320  0  <NA>
4 3.569953 4320 4320  0  <NA>
5 3.578984 8640 8640  0  <NA>
6 3.585665 2160 2160  0  <NA>

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in pdf("../Results/MyBars.pdf") : 
  cannot open file '../Results/MyBars.pdf'
Execution halted

======================================================================
Inspecting script file PP_Regress_loc.R...

File contents are:

**********************************************************************
#!/usr/bin/env Rscript

# Script: PP_Regress_loc.R
# Author: Electric Emus (dongxuan.zhu22@imperial.ac.uk, f.ferreira22@imperial.ac.uk, 
#                        amy.feakes22@imperial.ac.uk, zitong.zhao22@imperial.ac.uk,
#                        xuanyin.zheng22@imperial.ac.uk)
# Description: Practical work using functions 
# Date: Oct 2022

# Clear workspace
rm(list=ls())

# Load data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

## Functions ##
reg <- function(SubData,k){

    if (nrow(SubData[SubData$Location == catLocation[k], ]) == 0) { 
        return (rep(NA,8))
        }
   
    M <- rep(NA,8)

    MyLM <- summary(lm(log(Predator.mass) ~ log(Prey.mass), data = SubData[SubData$Location == catLocation[k], ]))
    
    if (length(MyLM$fstatistic) == 0) {MyLM$fstatistic = NA}#how to improve this part
    M[1] <- MyLM$coefficients[[1]]
    M[2] <- MyLM$coefficients[[2]]
    M[3] <- MyLM$r.squared[[1]]
    M[4] <- MyLM$fstatistic[[1]]
    M[5] <- MyLM$coefficients[[1,4]] #[2,4] out of range?
    M[6] <- catLifestage[[i]]
    M[7] <- catType[[j]]
    M[8] <- catLocation[[k]]

    return(M)
}

print("Running regression analysis on Predator-Prey mass ratios from Ecological Archives - ESA")
print(".")
print(".")
print(".")

## data wrangling ##
# MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
# MyDF$Location <- as.factor(MyDF$Location)
regDF <- as.data.frame(MyDF[,c("Type.of.feeding.interaction","Prey.mass","Predator.mass","Predator.lifestage","Location")],stringsAsFactors = F)



## linear regression ##

catType <- as.character(unique(regDF$Type.of.feeding.interaction))
numType <- length(catType)
catLifestage <- as.character(unique(regDF$Predator.lifestage))
numLifestage <- length(catLifestage)
catLocation <- as.character(unique(regDF$Location))
numLocation <- length(catLocation)

# rowDF <- numType*numLifestage*numLocation
outDF <- data.frame(matrix(NA,0,8))

suppressWarnings(
for (i in 1:numLifestage){
   
    for (j in 1:numType){
     
        if (nrow(regDF[regDF$Type.of.feeding.interaction == catType[j] 
                            & regDF$Predator.lifestage == catLifestage[i], ]) == 0) {
                                next
                            }

        SubData = regDF[regDF$Type.of.feeding.interaction == catType[j] 
                            & regDF$Predator.lifestage == catLifestage[i], ]
        
        locDF = t(sapply(1:numLocation, function(k) reg(SubData,k)))
        outDF <- rbind(outDF,locDF)
        # browser()
        
    }
})

outDF <- outDF[complete.cases(outDF),]

colnames(outDF) <- c("intercept","slope","r.squared","fstatistic","p.value","Predator.lifestage","Type.of.feeding.interaction","Location")

# ## exports ##
write.csv(outDF, "../results/PP_Regress_loc_Results.csv",row.names=FALSE)
print("Analysis completed. Output can be found in the Results folder!!!")


**********************************************************************

Testing PP_Regress_loc.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Running regression analysis on Predator-Prey mass ratios from Ecological Archives - ESA"
[1] "."
[1] "."
[1] "."
[1] "Analysis completed. Output can be found in the Results folder!!!"

**********************************************************************

Code ran without errors

Time consumed = 0.55072s

======================================================================
Inspecting script file control_flow.R...

File contents are:

**********************************************************************
a <- TRUE
if (a == TRUE) {
    print ("a is TRUE")
} else {
    print ("a is FALSE")
}

z <- runif(1)
if (z <= 0.5) {
    print ("Less than a half")
}

for (i in 1:10) {
    j <- i * i
    print(paste(i, " squared is", j ))
}

for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
      print(paste('The species is', species))
}

v1 <- c("a","bc","def")
for (i in v1) {
    print(i)
}

i <- 0
while (i < 10) {
    i <- i+1
    print(i^2)
}
**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 


**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "The species is Heliodoxa rubinoides"
[1] "The species is Boissonneaua jardini"
[1] "The species is Sula nebouxii"
[1] "a"
[1] "bc"
[1] "def"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100

**********************************************************************

Code ran without errors

Time consumed = 0.20307s

======================================================================
Inspecting script file TAutoCorr.bib...

File contents are:

**********************************************************************
@misc{themulquabio_git,
  author = {Samraat Pawar},
  title = {The Multilingual Quantitative Biologist!},
  url = {https://mhasoba.github.io/TheMulQuaBio/intro.html},
  note = "{Accessed: 2022-12-05}",
  year = 2022
}


**********************************************************************

Testing TAutoCorr.bib...

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: TAutoCorr.R
## Description: Script that analyses a potential serial autocorrelation in 
##              Key West, Florida
## Author: Electric Emus (f.ferreira22@imperial.ac.uk, amy.feakes22@imperial.ac.uk, zitong.zhao22@imperial.ac.uk,
##                        xuanyin.zheng22@imperial.ac.uk, dongxuan.zhu22@imperial.ac.uk)
## Date: December 2022
##------------------------------------------


# Clean enviroment
rm(list = ls())

# Clear graphics
graphics.off()

# Load libraries
suppressMessages(require(tidyverse, quietly = T))

# Loading data
load("../data/KeyWestAnnualMeanTemperature.RData")


#########################################################################
# PRACTICAL QUESTION
# Are the Temperatures of one year significantly correlated with the
# next year (Successive years), across years in given location?
#########################################################################


##### Data Preparation #####
# PROCEDURES EXPLANATION:
# First we create two vectors with the temperature values.
# On the temp0 vector we remove the last year (2000)
# And on the temp1 we remove the first year (1901)
# We assign the vectors into a data frame and
# calculate the initial correlation coefficient
temp0 <- head(ats$Temp, length(ats$Temp) - 1)
temp1 <- tail(ats$Temp, length(ats$Temp) - 1)
df <- data.frame(temp0, temp1)

png("../results/Florida_Temperatures_relationship.png")
plot(df$temp0, df$temp1,
     main = "Annual Temperature Relationship \n(time-series (n-1))",
     xlab = "t0",
     ylab = "t1")
abline(lm(df$temp1 ~ df$temp0), col = "red", lty = 3, lwd = 3)

Sys.sleep(0.1)
graphics.off()

# Calculate the Initial Correlation
initial_cor <- cor(df$temp0, df$temp1)



##### Simulations #####
# For the simulation we create a function that calculates the
# autocorrelation coefficient. We create a sample of the temperatures and
# feed it into the function to generate and populate the autocorrelation vector

# Function to calculate the autocorrelation value between years
find_autocorr <- function(v){
  temp0 <- head(v, length(v)-1)
  temp1 <- tail(v, length(v)-1)

  corfit <- cor(temp0, temp1)

  return(corfit)
}


# Setting the simulation parameters
n_iters <- 10000
temp_cor <- vector( , n_iters)

for (i in 1:n_iters){
  temp_cor[i] <- find_autocorr(sample(ats$Temp, replace = FALSE))
}

png("../results/Florida_Temperatures_cor_density.png")
plot(density(temp_cor), 
     main = "Correlation Coefficients of Randomized temperature\n(time series (1900-2000))",
     col = "red",
     xlab = "Correlation coefficients")
abline(v = initial_cor, col = "blue", lty = 3, lwd = 3)
text(x = (initial_cor-0.075), y = 3, 
     labels = paste("Initial\nCorrelation\nr = ", round(initial_cor, 3)),
     col = "blue", cex = 1)

Sys.sleep(0.1)
graphics.off()

# The p-value it is calculated as a fraction of correlation coefficients 
# greater that initial correlation
autocor_ratio <- (sum(temp_cor > initial_cor)) / n_iters


**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 2.16035s

======================================================================
Inspecting script file Ricker.R...

File contents are:

**********************************************************************
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}

Ricker(N0=1, r=1, K=10, generations=50)
plot(Ricker(generations=10), type="l")
**********************************************************************

Testing Ricker.R...

Output (only first 500 characters): 


**********************************************************************
 [1]  1.000000  2.459603  5.228057  8.425257  9.862190  9.999042 10.000000
 [8] 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000
[15] 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000
[22] 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000
[29] 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000
[36] 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000
[43] 10.000000 10.000000 10.000000 10.000000 10.000
**********************************************************************

Code ran without errors

Time consumed = 0.23973s

======================================================================
Inspecting script file boilerplate.R...

File contents are:

**********************************************************************
# A boilerplate R script

MyFunction <- function(Arg1, Arg2) {
  
  # Statements involving Arg1, Arg2:
  print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
  print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type
    
  return (c(Arg1, Arg2)) #this is optional, but very useful
}

MyFunction(1,2) #test the function
MyFunction("Riki","Tiki") #A different test
**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.20463s

======================================================================
Inspecting script file R_conditionals.R...

File contents are:

**********************************************************************
# Checks if an integer is even
is.even <- function(n = 2) {
  if (n %% 2 == 0) {
    return(paste(n,'is even!'))
  } else {
  return(paste(n,'is odd!'))
  }
}

is.even(6)

# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
  if (log2(n) %% 1==0) {
    return(paste(n, 'is a power of 2!'))
  } else {
  return(paste(n,'is not a power of 2!'))
    }
}

is.power2(4)

# Checks if a number is prime
is.prime <- function(n) {
  if (n==0) {
    return(paste(n,'is a zero!'))
  } else if (n==1) {
    return(paste(n,'is just a unit!'))
    }
    
  ints <- 2:(n-1)
  
  if (all(n%%ints!=0)) {
    return(paste(n,'is a prime!'))
  } else {
  return(paste(n,'is a composite!'))
    }
}

is.prime(3)



**********************************************************************

Testing R_conditionals.R...

Output (only first 500 characters): 


**********************************************************************
[1] "6 is even!"
[1] "4 is a power of 2!"
[1] "3 is a prime!"

**********************************************************************

Code ran without errors

Time consumed = 0.18720s

======================================================================
Inspecting script file browse.R...

File contents are:

**********************************************************************
Exponential <- function(N0 = 1, r = 1, generations = 10) {
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations) {
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return (N)
}

plot(Exponential(), type="l", main="Exponential growth")

**********************************************************************

Testing browse.R...

Output (only first 500 characters): 


**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.24035s

======================================================================
Inspecting script file GPDD_Data.R...

File contents are:

**********************************************************************
rm(list=ls())
library(ggplot2)
library(maps)

load("../Data/GPDDFiltered.RData")

map(database = "world", fill = TRUE, 
    bg = "white", ylim = c(-80, 100), 
    border = "white",panel.first = grid())


points(x = gpdd$long, y = gpdd$lat, col = "blue")

**********************************************************************

Testing GPDD_Data.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in readChar(con, 5L, useBytes = TRUE) : cannot open the connection
Calls: load -> readChar
In addition: Warning message:
In readChar(con, 5L, useBytes = TRUE) :
  cannot open compressed file '../Data/GPDDFiltered.RData', probable reason 'No such file or directory'
Execution halted

======================================================================
Inspecting script file PP_Regress.R...

File contents are:

**********************************************************************
rm(list = ls())
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")
head(data)
require(ggplot2)
data$Type.of.feeding.interaction<-as.factor(data$Type.of.feeding.interaction)
data$Predator.lifestage<-as.factor(data$Predator.lifestage)
str(data)
pdf("../results/PP_Regress.pdf")
p <- ggplot(data, aes(log(Prey.mass),log(Predator.mass)))+
  geom_point(data, mapping= aes(color = Predator.lifestage), size=I(1), shape=I(3),alpha=0.5)+
  facet_grid(Type.of.feeding.interaction ~.,scales = "free")+
  stat_smooth(data, mapping= aes(color = Predator.lifestage,size=I(0.5)), method = "lm", fullrange = TRUE)
p <- p + theme_bw() + # make the background white
  theme(aspect.ratio=0.5, legend.position = "bottom",
        legend.key.size = unit(0.5,"cm"),
        axis.title.x = element_text(vjust = 1, size = 10),
        axis.title.y = element_text(size = 10),
        legend.title = element_text(face='bold',size = 8),
        legend.text = element_text(size = 8))+
  guides(color = guide_legend(nrow = 1))+
  labs(x= "Prey Mass(g)", y = "Predator Mass(g)",
       color ="Predator.lifestage",size=0.1)
p
dev.off()

uniqF<-unique(data$Type.of.feeding.interaction)
uniqL<-unique(data$Predator.lifestage)

df<- data.frame()
for (i in uniqF){
  for(k in uniqL){
    PreM<- subset(data, data$Type.of.feeding.interaction ==i&
                             data$Predator.lifestage == k)
    if (dim(PreM)[1] != 0){
      
      sumlm<- summary(lm(log(Predator.mass)~log(Prey.mass),data = PreM),na.action=na.exclude)
      if (is.null(sumlm$fstatistic)){
        f<- "Na"
      }else{f<-sumlm$fstatistic[1]}
      daf<- data.frame(
        i,
        k,
        sumlm$r.squared,
        sumlm$coefficients[1],
        sumlm$coefficients[2],
        sumlm$coefficients[8],
        f)
      df<- rbind(daf,df)
    }else{print(paste("Not include:",i,k))}
  }
}


names(df) = c("Type of Feeding Interaction", "Predator Lifestage",
                  "R2", "intercept", "slope", "p-value", "F-value")
write.csv(df,"../results/PP_Regress_Results.csv")

**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 


**********************************************************************
  Record.number In.refID IndividualID                   Predator
1             1  ATSH063            1 Rhizoprionodon terraenovae
2             2  ATSH080            2 Rhizoprionodon terraenovae
3             3  ATSH089            3 Rhizoprionodon terraenovae
4             4  ATSH143            4 Rhizoprionodon terraenovae
5             5  ATSH161            5 Rhizoprionodon terraenovae
6             6  ATSH166            6 Rhizoprionodon terraenovae
      Predator.common.name       Predator.taxo
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: ggplot2
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: In qt((1 - level)/2, df) : NaNs produced
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

======================================================================
Inspecting script file Vectorize2.R...

File contents are:

**********************************************************************
# Runs the stochastic Ricker equation with gaussian fluctuations

rm(list = ls())

stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{

  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix

  N[1, ] <- p0

  for (pop in 1:length(p0)) { #loop through the populations # nolint

    for (yr in 2:numyears){ #for each pop, loop through the years

      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
    }
  
  }
  return(N)

}


# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{

  N <- matrix(NA, numyears, length(p0))
  
  N[1, ] <- p0
  for (yr in 2:numyears)
  {
    N[yr,] <- N[yr-1,] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(1, 0, sigma))
  }
  return (N)
}
stochrickvect(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 


**********************************************************************
            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
  [1,] 0.9079830 1.1090713 1.1142291 1.3696205 0.6331977 1.4025347 0.6923104
  [2,] 1.0514050 1.0089135 1.0073514 0.9113992 1.0196167 0.8971574 1.0384646
  [3,] 1.1319010 1.1429755 1.1433470 1.1606774 1.1403598 1.1622343 1.1354657
  [4,] 1.0590709 1.0553148 1.0551872 1.0491346 1.0562097 1.0485810 1.0578714
  [5,] 1.0625721 1.0635868 1.0636210 1.0652289 1.0633462 1.0653743 1.0628975
  [6,] 1.5277359 1.5273340 1.5273204 1.
**********************************************************************

Code ran without errors

Time consumed = 0.37526s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:

**********************************************************************
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)
MyData[MyData == ""] = 0
MyData <- dplyr::as_tibble(t(MyData))
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- gather(TempData, key="Species",value = "Count", -"Cultivation", -"Block", -"Plot", -"Quadrat")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData <- MyWrangledData %>%
  mutate(Cultivation = as.factor(Cultivation),
         Block = as.factor(Block),
         Plot =as.factor(Plot),
         Quadrat = as.factor(Quadrat),
         Species = as.factor(Species),
         Count = as.integer(Count))
         

glimpse(MyWrangledData) #like str(), but nicer!
filter(MyWrangledData, Count>100) #like subset(), but nicer!
slice(MyWrangledData, 10:15) # Look at a particular range of data rows
MyWrangledData %>%
  group_by(Species) %>%
  summarise(avg = mean(Count))
aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean) 


**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 


**********************************************************************
[1] "matrix" "array" 
[1] "data.frame"
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6" 
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.
Using compatibility `.name_repair`.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
Loading required package: reshape2
Error in gather(TempData, key = "Species", value = "Count", -"Cultivation",  : 
  could not find function "gather"
Execution halted

======================================================================
Inspecting script file preallocate.R...

File contents are:

**********************************************************************
NoPreallocFun <- function(x) {
    a <- vector() # empty vector
    for (i in 1:x) {
        a <- c(a, i) # concatenate
        #print(a)
        #print(object.size(a))
    }
}

system.time(NoPreallocFun(1000))

PreallocFun <- function(x) {
    a <- rep(NA, x) # pre-allocated vector
    for (i in 1:x) {
        a[i] <- i # assign
        #print(a)
        #print(object.size(a))
    }
}

system.time(PreallocFun(1000))
**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 


**********************************************************************
   user  system elapsed 
  0.016   0.000   0.016 
   user  system elapsed 
  0.004   0.000   0.005 

**********************************************************************

Code ran without errors

Time consumed = 0.24201s

======================================================================
Inspecting script file break.R...

File contents are:

**********************************************************************
i <- 0 #Initialize i
    while (i < Inf) {
        if (i == 10) {
            break 
        } else { # Break out of the while loop!  
            cat("i equals " , i , " \n")
            i <- i + 1 # Update i
    }
}
**********************************************************************

Testing break.R...

Output (only first 500 characters): 


**********************************************************************
i equals  0  
i equals  1  
i equals  2  
i equals  3  
i equals  4  
i equals  5  
i equals  6  
i equals  7  
i equals  8  
i equals  9  

**********************************************************************

Code ran without errors

Time consumed = 0.22850s

======================================================================
Inspecting script file run_get_TreeHeight.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Script: run_get_TreeHeight
# Author: 'Electric Emus (zitong.zhao22@imperial.ac.uk, amy.feakes22@imperial.ac.uk, 
#                         f.ferreira22@imperial.ac.uk, xuanyin.zheng22@imperial.ac.uk,
#                         dongxuan.zhu22@imperial.ac.uk)'
# Description: run the tree file and gain the tree height file
# Arguments: into space separated values file
# Date: Dec 2022


#run the R script
TREEFILE='../data/trees.csv'

if [ $# -eq 1 ] ; then
  Rscript get_TreeHeight.R $1
  Routput=../results/trees_TreeHeights.csv
  if [ -f "$Routput" ]; then
    echo "R script -- using file $1 and output file $Routput"
  else
    echo "R script can not run sucessfully"
    exit 1
  fi
  
else
  Rscript get_TreeHeight.R $TREEFILE
  Routput=../results/trees_TreeHeights.csv
  if [ -f "$Routput" ]; then
    echo "R script -- using file trees.csv and output file $Routput"
  else
    echo "R script can not run sucessfully"
    exit 1
  fi
fi



#run the python script
if [ $# -eq 1 ] ; then
  python3 get_TreeHeight.py $1
  Poutput=../results/trees_TreeHeights_py.csv
  if [ -f "$Poutput" ]; then
    echo "python3 -- using file $1 and output file $Poutput"
  else
    echo "python3 can not run sucessfully"
    exit 1
  fi
  
else
  python3 get_TreeHeight.py ${TREEFILE}
  Poutput=../results/trees_TreeHeights_py.csv
  if [ -f "$Poutput" ]; then
    echo "python3 -- using file trees.csv and output file $Poutput"
  else
    echo "python3 can not run sucessfully"
    exit 1
  fi
fi

**********************************************************************

Testing run_get_TreeHeight.sh...

Output (only first 500 characters): 


**********************************************************************
Fatal error: cannot open file 'get_TreeHeight.R': No such file or directory
R script can not run sucessfully

**********************************************************************

Code ran without errors

Time consumed = 0.01622s

======================================================================
Inspecting script file get_Treeheight.R...

File contents are:

**********************************************************************
#!/usr/bin/env Rscript

# Script: treeheight.R
# Author: Electric Emus (f.ferreira22@imperial.ac.uk, amy.feakes22@imperial.ac.uk, zitong.zhao22@imperial.ac.uk,
#                        xuanyin.zheng22@imperial.ac.uk, dongxuan.zhu22@imperial.ac.uk)
# Description: Practical work using functions 
# Date: Oct 2022

#Clear workspace
rm(list=ls())


###DESCRIPTION####
# csv format species name, distance, degrees 
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees: The angle of elevation of tree
# distance: The distance from base of tree (e.g., meters)

####CALCULATIONS####
# The heights of the tree, same units as "distance"
treeheight<- function(degrees, distance) {
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
}

#### Command Line parameters#### 
# steps: input file, read file, create new colum tree height, calc tree heigh, create and put in new file 
main <- function () {
    args <- commandArgs(trailingOnly = TRUE) #this returns only arguments after 
    filename <- args[1] #inputing the file names in the command line 
    dat <- read.csv(file = filename) 
    dat$height.m <- NA #empty column
    dat[,4] <- treeheight(dat[,3], dat[,2])#this calculates tree height using above
    output_filename <- tools::file_path_sans_ext(basename(filename))
    output <- paste("../results/",output_filename,"_TreeHeights.csv", sep = "")
    write.csv(dat, output, row.names = FALSE)

    print("Completed Tree Height Calculation.")
    print("Data Files found in Results folder!!!")
}


main()

##issue - it doesnt work if in the command line you use a relative path to get to the data file 


**********************************************************************

Testing get_Treeheight.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in file(file, "rt") : invalid 'description' argument
Calls: main -> read.csv -> read.table -> file
Execution halted

======================================================================
Inspecting script file DataWrang.R...

File contents are:

**********************************************************************
rm(list=ls())
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
MyMetaData
dim(MyData)
str(MyData)

MyData[MyData == ""] = 0
MyData <- t(MyData) 
head(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
require(tidyverse)
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well 
MyWrangledData <- dplyr::as_tibble(MyWrangledData) 
MyWrangledData
MyWrangledData <- as_tibble(MyWrangledData) 
class(MyWrangledData)
glimpse(MyWrangledData) #like str(), but nicer!
filter(MyWrangledData, Count>100) #like subset(), but nicer!
slice(MyWrangledData, 10:15) # Look at a particular range of data rows
MyWrangledData %>%
  group_by(Species) %>%
  summarise(avg = mean(Count))
aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean) 


**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 


**********************************************************************
[1] "matrix" "array" 
[1] "data.frame"
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6" 
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: reshape2
Loading required package: tidyverse
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.6     ✔ purrr   0.3.4
✔ tibble  3.1.1     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

======================================================================
Inspecting script file Florida.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article} 
\usepackage{graphicx}

\title{Florida Temperture}

\author{Zitong Zhao}

\date{02/11/2022}

\begin{document}
  \maketitle
  
  \begin{abstract}
    This paper analyzes the temperture in Florida.
  \end{abstract}
  
  \section{Introduction}
  This paper analyzes the temperture in Florida.
  
  \section{Visualisation}
  \begin{figure}[h!]
    \centering
    \includegraphics[scale=0.65]{../results/CorTemp.pdf}
    \label{fig:temperature}
  \end{figure}


\end{document}
**********************************************************************

Testing Florida.tex...

======================================================================
Inspecting script file TreeHeight.R...

File contents are:

**********************************************************************
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

MyData <- read.csv("../data/trees.csv")
MyDegrees<-MyData[,2]
MyDistance<-MyData[,3]

TreeHeight <- function(degrees, distance) {
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("Tree height is:", height))
  return(height)
}
TreeHeight(MyDegrees, MyDistance)
Tree.Height.m<-TreeHeight(MyDegrees, MyDistance)

MyData2<-data.frame(MyData,Tree.Height.m)
MyData2
write.csv(MyData2, "../results/TreeHts.csv")

**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************
  [1] "Tree height is: 25.462680727681"  "Tree height is: 46.094124200205" 
  [3] "Tree height is: 15.2541806244397" "Tree height is: 16.1085376231346"
  [5] "Tree height is: 38.9782891142089" "Tree height is: 38.3661074268043"
  [7] "Tree height is: 17.5786750610666" "Tree height is: 28.5504607023457"
  [9] "Tree height is: 22.5701474298691" "Tree height is: 30.257477966697" 
 [11] "Tree height is: 29.5780499696015" "Tree height is: 30.2964612354713"
 [13] "Tree height is: 28.2539753999049" "Tre
**********************************************************************

Code ran without errors

Time consumed = 0.22858s

======================================================================
Inspecting script file basic_io.R...

File contents are:

**********************************************************************
# A simple script to illustrate R input-output.  
# Run line by line and check inputs outputs to understand what is happening  

MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it

write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names



**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
In write.table(MyData[1, ], file = "../results/MyData.csv", append = TRUE) :
  appending column names to file

======================================================================
Inspecting script file Vectorize1.R...

File contents are:

**********************************************************************
M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M) {
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]) {
    for (j in 1:Dimensions[2]) {
      Tot <- Tot + M[i,j]
    }
  }
  return (Tot)
}
 
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
   0.07    0.00    0.07 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.001   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.33036s

======================================================================
======================================================================
Finished running scripts

Ran into 12 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!